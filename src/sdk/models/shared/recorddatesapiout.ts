/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Date information associated with the record
 */
export class RecordDatesApiOut extends SpeakeasyBase {
    /**
     * The moment this record was completed if the record is currently in an end step measured in milliseconds since the Unix epoch
     */
    @SpeakeasyMetadata()
    @Expose({ name: "completed" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    completed?: Date;

    /**
     * The moment this Risk Cloud resource was created measured in milliseconds since the Unix epoch.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    created?: Date;

    /**
     * The number of days until this record is due
     */
    @SpeakeasyMetadata()
    @Expose({ name: "daysUntilDue" })
    daysUntilDue?: number;

    /**
     * The due date of this record and step SLA measured in milliseconds since the Unix epoch
     */
    @SpeakeasyMetadata()
    @Expose({ name: "dueDate" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    dueDate?: Date;

    /**
     * The moment this record was last completed regardless of if the record has transitioned from an end step measured in milliseconds since the Unix epoch
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastCompleted" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    lastCompleted?: Date;

    /**
     * The due date of this record measured in milliseconds since the Unix epoch
     */
    @SpeakeasyMetadata()
    @Expose({ name: "recordDueDate" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    recordDueDate?: Date;

    /**
     * The moment this Risk Cloud resource was last updated measured in milliseconds since the Unix epoch.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updated?: Date;
}
