/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

/**
 * A field type where, if provided, the response will only contain fields of the identified field type
 */
export enum FieldTypeFilter {
    Date = "DATE",
    User = "USER",
    ExternalUser = "EXTERNAL_USER",
    Text = "TEXT",
    TextArea = "TEXT_AREA",
    Number = "NUMBER",
    ESignature = "E_SIGNATURE",
    Checkbox = "CHECKBOX",
    MultiSelect = "MULTI_SELECT",
    Radio = "RADIO",
    Select = "SELECT",
    Attachment = "ATTACHMENT",
    Calculation = "CALCULATION",
    DateCalculation = "DATE_CALCULATION",
}

export class ReadAllFieldsRequest extends SpeakeasyBase {
    /**
     * The unique ID of an application where, if provided, the response will only contain fields from the identified application
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=application-id" })
    applicationId?: string;

    /**
     * A field type where, if provided, the response will only contain fields of the identified field type
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=field-type" })
    fieldType?: FieldTypeFilter;

    /**
     * The zero-indexed page number (must not be less than 0, defaults to 0)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
    page?: number;

    /**
     * The size of the page and maximum number of items to be returned (must not be less than 1, defaults to 20)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
    size?: number;

    /**
     * The unique ID of a step where, if provided, the response will only contain fields from the identified step
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=step-id" })
    stepId?: string;

    /**
     * The unique ID of a workflow where, if provided, the response will only contain fields from the identified workflow
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=workflow-id" })
    workflowId?: string;
}

export class ReadAllFieldsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    pageModelOutFieldApiOut?: shared.PageModelOutFieldApiOut;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
